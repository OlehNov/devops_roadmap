# Generated by Django 5.0.6 on 2024-09-30 18:26

import django.core.validators
import django.db.models.deletion
import glamps.utils
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Glamp",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "glamp_type",
                    models.PositiveSmallIntegerField(
                        default=None, verbose_name="Glamp Type"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default=None, max_length=225, verbose_name="Glamp Name"
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=5000,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "capacity",
                    models.PositiveSmallIntegerField(
                        default=None,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Capacity",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=0.0,
                        help_text="Price for one night",
                        max_digits=10,
                        null=True,
                        verbose_name="Price",
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        default=None,
                        help_text="1: Unregister, 2: Moderated, 3: Active, 4: Closed",
                        verbose_name="Status",
                    ),
                ),
                (
                    "street",
                    models.CharField(
                        default=None, max_length=255, verbose_name="Street"
                    ),
                ),
                (
                    "building_number",
                    models.CharField(
                        default=None, max_length=255, verbose_name="Building Number"
                    ),
                ),
                (
                    "apartment",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=25,
                        null=True,
                        verbose_name="Apartment",
                    ),
                ),
                (
                    "city",
                    models.CharField(default=None, max_length=255, verbose_name="City"),
                ),
                (
                    "region",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=255,
                        null=True,
                        verbose_name="Region",
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-90.0),
                            django.core.validators.MaxValueValidator(90.0),
                        ],
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-180.0),
                            django.core.validators.MaxValueValidator(180.0),
                        ],
                        verbose_name="Longitude",
                    ),
                ),
                (
                    "heating_system",
                    models.BooleanField(default=False, verbose_name="Heating System"),
                ),
                (
                    "cooling_system",
                    models.BooleanField(default=False, verbose_name="Cooling System"),
                ),
                (
                    "internet",
                    models.BooleanField(default=False, verbose_name="Internet"),
                ),
                (
                    "laundry_services",
                    models.BooleanField(default=False, verbose_name="Laundry Services"),
                ),
                ("tv", models.BooleanField(default=False, verbose_name="TV")),
                ("iron", models.BooleanField(default=False, verbose_name="Iron")),
                (
                    "workplace",
                    models.BooleanField(default=False, verbose_name="Workplace"),
                ),
                ("pool", models.BooleanField(default=False, verbose_name="Pool")),
                ("spa", models.BooleanField(default=False, verbose_name="Spa")),
                ("jacuzzi", models.BooleanField(default=False, verbose_name="Jacuzzi")),
                ("vat", models.BooleanField(default=False, verbose_name="Vat")),
                ("sauna", models.BooleanField(default=False, verbose_name="Sauna")),
                (
                    "fireplace",
                    models.BooleanField(default=False, verbose_name="Fireplace"),
                ),
                ("gazebo", models.BooleanField(default=False, verbose_name="Gazebo")),
                ("terrace", models.BooleanField(default=False, verbose_name="Terrace")),
                (
                    "barbecue_area",
                    models.BooleanField(default=False, verbose_name="Barbecue Area"),
                ),
                (
                    "hammocks",
                    models.BooleanField(default=False, verbose_name="Hammocks"),
                ),
                (
                    "garden_furniture",
                    models.BooleanField(default=False, verbose_name="Garden Furniture"),
                ),
                (
                    "pets_farm",
                    models.BooleanField(default=False, verbose_name="Pets/Farm"),
                ),
                ("riding", models.BooleanField(default=False, verbose_name="Riding")),
                (
                    "hiking_walking",
                    models.BooleanField(default=False, verbose_name="Hiking/Walking"),
                ),
                ("fishing", models.BooleanField(default=False, verbose_name="Fishing")),
                (
                    "swimming",
                    models.BooleanField(default=False, verbose_name="Swimming"),
                ),
                ("boating", models.BooleanField(default=False, verbose_name="Boating")),
                (
                    "alpine_skiing",
                    models.BooleanField(
                        default=False, verbose_name="Alpine Skiing Activities"
                    ),
                ),
                (
                    "meditation_yoga",
                    models.BooleanField(default=False, verbose_name="Meditation/Yoga"),
                ),
                (
                    "sports_area",
                    models.BooleanField(default=False, verbose_name="Sports Area"),
                ),
                (
                    "game_area",
                    models.BooleanField(default=False, verbose_name="Game Area"),
                ),
                (
                    "events_excursions",
                    models.BooleanField(
                        default=False, verbose_name="Events And Excursions"
                    ),
                ),
                (
                    "national_park",
                    models.BooleanField(default=False, verbose_name="National Park"),
                ),
                ("sea", models.BooleanField(default=False, verbose_name="Sea")),
                ("lake", models.BooleanField(default=False, verbose_name="Lake")),
                (
                    "stream",
                    models.BooleanField(default=False, verbose_name="River/Stream"),
                ),
                (
                    "waterfall",
                    models.BooleanField(default=False, verbose_name="Waterfall"),
                ),
                (
                    "thermal_springs",
                    models.BooleanField(default=False, verbose_name="Thermal Springs"),
                ),
                (
                    "mountains",
                    models.BooleanField(default=False, verbose_name="Mountains"),
                ),
                (
                    "salt_caves",
                    models.BooleanField(default=False, verbose_name="Salt Caves"),
                ),
                (
                    "beautiful_views",
                    models.BooleanField(default=False, verbose_name="Beautiful Views"),
                ),
                (
                    "number_of_bedrooms",
                    models.PositiveSmallIntegerField(
                        default=None, verbose_name="Number Of Bedrooms"
                    ),
                ),
                (
                    "number_of_beds",
                    models.PositiveSmallIntegerField(
                        default=None, verbose_name="Number Of Beds"
                    ),
                ),
                (
                    "cot_for_babies",
                    models.BooleanField(default=False, verbose_name="Cot For Babies"),
                ),
                (
                    "number_of_bathrooms",
                    models.PositiveSmallIntegerField(
                        default=None, verbose_name="Number Of Bathrooms"
                    ),
                ),
                (
                    "bathroom_in_room",
                    models.BooleanField(
                        default=False, verbose_name="Bathroom In The Room"
                    ),
                ),
                (
                    "kitchen_in_room",
                    models.BooleanField(
                        default=False, verbose_name="Kitchen In The Room"
                    ),
                ),
                (
                    "dining_area",
                    models.BooleanField(default=False, verbose_name="Dining area"),
                ),
                (
                    "microwave",
                    models.BooleanField(default=False, verbose_name="Microwave"),
                ),
                ("plate", models.BooleanField(default=False, verbose_name="Plate")),
                (
                    "refrigerator",
                    models.BooleanField(default=False, verbose_name="Refrigerator"),
                ),
                (
                    "kitchen_on_territory",
                    models.BooleanField(
                        default=False, verbose_name="Kitchen On The Territory"
                    ),
                ),
                (
                    "no_kitchen",
                    models.BooleanField(default=False, verbose_name="No Kitchen"),
                ),
                (
                    "breakfast_included",
                    models.BooleanField(
                        default=False, verbose_name="Breakfast Is Included"
                    ),
                ),
                (
                    "lunch_included",
                    models.BooleanField(
                        default=False, verbose_name="Lunch Is Included"
                    ),
                ),
                (
                    "dinner_included",
                    models.BooleanField(
                        default=False, verbose_name="Dinner Is Included"
                    ),
                ),
                (
                    "all_inclusive",
                    models.BooleanField(default=False, verbose_name="All Inclusive"),
                ),
                (
                    "room_service",
                    models.BooleanField(default=False, verbose_name="Room service"),
                ),
                ("bar", models.BooleanField(default=False, verbose_name="Bar")),
                (
                    "restaurant",
                    models.BooleanField(default=False, verbose_name="Restaurant"),
                ),
                (
                    "instant_booking",
                    models.BooleanField(default=False, verbose_name="Instant Booking"),
                ),
                (
                    "reception_24",
                    models.BooleanField(
                        default=False, verbose_name="24-Hour Reception Desk"
                    ),
                ),
                (
                    "free_cancellation",
                    models.BooleanField(
                        default=False, verbose_name="Free cancellation"
                    ),
                ),
                (
                    "allowed_with_animals",
                    models.BooleanField(
                        default=False, verbose_name="Allowed With Animals"
                    ),
                ),
                (
                    "suitable_for_children",
                    models.BooleanField(
                        default=False, verbose_name="Suitable For Children"
                    ),
                ),
                (
                    "suitable_for_groups",
                    models.BooleanField(
                        default=False, verbose_name="Suitable For Groups"
                    ),
                ),
                (
                    "can_order_transfer",
                    models.BooleanField(
                        default=False, verbose_name="You Can Order A Transfer"
                    ),
                ),
                (
                    "car_charging_station",
                    models.BooleanField(
                        default=False, verbose_name="Car Charging Station"
                    ),
                ),
                (
                    "place_for_car",
                    models.BooleanField(
                        default=False, verbose_name="A Place For A Car"
                    ),
                ),
                (
                    "projector_and_screen",
                    models.BooleanField(
                        default=False, verbose_name="Projector And Screen"
                    ),
                ),
                (
                    "area_for_events",
                    models.BooleanField(default=False, verbose_name="Area For Events"),
                ),
                (
                    "territory_under_protection",
                    models.BooleanField(
                        default=False, verbose_name="The Territory Is Under Protection"
                    ),
                ),
                (
                    "cloakroom",
                    models.BooleanField(default=False, verbose_name="Cloakroom"),
                ),
                (
                    "without_thresholds",
                    models.BooleanField(
                        default=False, verbose_name="Without Thresholds"
                    ),
                ),
                (
                    "no_ladder",
                    models.BooleanField(default=False, verbose_name="No Ladder"),
                ),
                (
                    "bath_with_handrails",
                    models.BooleanField(
                        default=False, verbose_name="Bath With Handrails"
                    ),
                ),
                (
                    "toilet_with_handrails",
                    models.BooleanField(
                        default=False, verbose_name="Toilet With Handrails"
                    ),
                ),
                (
                    "shower_chair",
                    models.BooleanField(default=False, verbose_name="Shower Chair"),
                ),
                (
                    "suitable_for_guests_in_wheelchairs",
                    models.BooleanField(
                        default=False, verbose_name="Suitable For Guests In Wheelchairs"
                    ),
                ),
                (
                    "room_on_first_flor",
                    models.BooleanField(
                        default=False,
                        verbose_name="The Room Is Completely Located On The First Floor",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created"),
                ),
                (
                    "updated",
                    models.DateTimeField(auto_now=True, verbose_name="Updated"),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="glamp_owner",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Glamp Owner",
                    ),
                ),
            ],
            options={
                "verbose_name": "Glamp",
                "verbose_name_plural": "Glamp",
            },
        ),
        migrations.CreateModel(
            name="Picture",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pic",
                    models.FileField(
                        upload_to=glamps.utils.folder_path,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=[
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "gif",
                                    "bmp",
                                    "svg",
                                    "webp",
                                ]
                            )
                        ],
                        verbose_name="Картинка",
                    ),
                ),
                (
                    "glamp",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="picture",
                        to="glamps.glamp",
                        verbose_name="Glamp",
                    ),
                ),
            ],
            options={
                "verbose_name": "Картинка",
                "verbose_name_plural": "Картинка",
            },
        ),
    ]
